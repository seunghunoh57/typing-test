{"version":3,"sources":["useKeyPress.js","time.js","wordGenerator.js","App.js","serviceWorker.js","index.js"],"names":["useKeyPress","callback","useState","keyPressed","setKeyPressed","useEffect","downHandler","key","length","upHandler","window","addEventListener","removeEventListener","currentTime","Date","getTime","generate","count","Array","fill","map","_","faker","random","word","toLowerCase","join","App","words","leftPadding","setLeftPadding","outgoingChars","setOutgoingChars","charAt","currentChar","setCurrentChar","substr","incomingChars","setIncomingChars","seconds","setSeconds","secondsActive","setSecondsActive","timer","setTimer","wpm","setWPM","typedChars","setTypedChars","accuracy","setAccuracy","correct","setCorrect","interval","clearInterval","setInterval","updatedOutgoingChars","updatedIncomingChars","updatedTypedChars","substring","split","timeElapsed","toFixed","className","onKeyPress","slice","id","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.234e0cdb.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useKeyPress = (callback) => {\r\n  const [keyPressed, setKeyPressed] = useState();\r\n  useEffect(() => {\r\n    const downHandler = ({ key }) => {\r\n      if (keyPressed !== key && key.length === 1) {\r\n        setKeyPressed(key);\r\n        callback && callback(key);\r\n      }\r\n    };\r\n    const upHandler = () => {\r\n      setKeyPressed(null);\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", downHandler);\r\n    window.addEventListener(\"keyup\", upHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n      window.removeEventListener(\"keyup\", upHandler);\r\n    };\r\n  });\r\n  return keyPressed;\r\n};\r\n\r\nexport default useKeyPress;\r\n","export const currentTime = () => new Date().getTime();\r\n","import faker from \"faker\";\r\n\r\nexport const generate = (count = 10) => {\r\n  return new Array(count)\r\n    .fill()\r\n    .map((_) => faker.random.word().toLowerCase())\r\n    .join(\" \");\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport useKeyPress from \"./useKeyPress.js\";\nimport { currentTime } from \"./time.js\";\nimport { generate } from \"./wordGenerator.js\";\nimport \"./App.css\";\n\nfunction App() {\n  // List of hooks\n  const words = generate();\n  const [leftPadding, setLeftPadding] = useState(\n    new Array(30).fill(\" \").join(\" \")\n  );\n  const [outgoingChars, setOutgoingChars] = useState(\"\");\n  const [currentChar, setCurrentChar] = useState(words.charAt(0));\n  const [incomingChars, setIncomingChars] = useState(words.substr(1));\n  const [seconds, setSeconds] = useState(0);\n  const [secondsActive, setSecondsActive] = useState(false);\n  const [timer, setTimer] = useState();\n  const [wpm, setWPM] = useState(\"0\");\n  const [typedChars, setTypedChars] = useState(\"\");\n  const [accuracy, setAccuracy] = useState(\"0\");\n  const [correct, setCorrect] = useState(true);\n\n  useEffect(() => {\n    let interval = null;\n    if (secondsActive) {\n      if (seconds >= 60) {\n        clearInterval(interval);\n        setSecondsActive(false);\n      }\n      interval = setInterval(() => {\n        setSeconds((seconds) => seconds + 1);\n      }, 1000);\n    } else if (!secondsActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [secondsActive, seconds]);\n\n  // Key press function with callback \"key\", the pressed key\n  // Hooks are used to make appropriate data changes\n  useKeyPress((key) => {\n    if (!secondsActive) {\n      setSecondsActive(true);\n      setSeconds(0);\n      setTimer(currentTime);\n    }\n    let updatedOutgoingChars = outgoingChars;\n    let updatedIncomingChars = incomingChars;\n    let updatedTypedChars = typedChars + key;\n\n    if (key === currentChar) {\n      setCorrect(true);\n      if (leftPadding.length > 0) {\n        setLeftPadding(leftPadding.substring(1));\n      }\n      updatedOutgoingChars += currentChar;\n      setOutgoingChars(updatedOutgoingChars);\n\n      setCurrentChar(incomingChars.charAt(0));\n      updatedIncomingChars = incomingChars.substring(1);\n      if (updatedIncomingChars.split(\" \").length < 10) {\n        updatedIncomingChars += \" \" + generate();\n      }\n      setIncomingChars(updatedIncomingChars);\n\n      if (currentChar === \" \") {\n        let timeElapsed = currentTime() - timer;\n        setWPM(\n          (updatedOutgoingChars.length / ((5 * timeElapsed) / 60000)).toFixed(2)\n        );\n      }\n    } else {\n      setCorrect(false);\n    }\n    setTypedChars(updatedTypedChars);\n    setAccuracy(\n      ((updatedOutgoingChars.length * 100) / updatedTypedChars.length).toFixed(\n        2\n      )\n    );\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"AppHeader\">\n        <h1>typing test</h1>\n        <div className=\"textInputBase\" onKeyPress={useKeyPress}>\n          <span className=\"outgoingText correctText\">\n            {(leftPadding + outgoingChars).slice(-30)}\n          </span>\n          <span className={correct ? \"currentChar\" : \"incorrectText\"}>\n            {currentChar}\n          </span>\n          <span className=\"incomingText\">{incomingChars.substr(0, 30)}</span>\n        </div>\n        <p id=\"results\">\n          {wpm} wpm | {accuracy}% acc\n        </p>\n        <p>{seconds}s</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}